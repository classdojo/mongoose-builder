// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  exports.plugin = function() {
    /*
    This is class abstracts away mongoose connections
    */

    var Connections, mongoose, _;

    mongoose = require("mongoose");
    _ = require("underscore");
    Connections = (function() {
      /*
      databaseSettings: {Object} -> This should be a hash
      with the following structure:
      
      databaseTag1:
        name: "name of the database in the mongo cluster"
        host: ["primary host", "optional replica 1", "optional replica 2"]
        port: 1000 #port number
        user: "dbUser"
        pass: "dbPass"
        options:
          mongoNativeOption1: Value1
          moreDocumentation: http://docs.mongodb.org/manual/reference/connection-string/
      databaseTag2:
        ......
      */
      function Connections(databaseSettings) {
        this._constructConnectionString = __bind(this._constructConnectionString, this);
        this.get = __bind(this.get, this);
        this.connect = __bind(this.connect, this);        this._settings = databaseSettings;
        this._connections = null;
        this.initialized = false;
      }

      /*
        Method: connect
      */


      Connections.prototype.connect = function(callback) {
        var connString, database, setting, _ref;

        this._connections = {};
        _ref = this._settings.databases;
        for (database in _ref) {
          setting = _ref[database];
          connString = this._constructConnectionString(database, setting);
          this._connections[database] = mongoose.createConnection(connString);
        }
        this.initialized = true;
        return callback(null);
      };

      Connections.prototype.get = function() {
        return this._connections;
      };

      Connections.prototype._constructConnectionString = function(database, settings) {
        var authString, connStrings, host, opt, optionsStr, s, val, _i, _len, _ref, _ref1;

        connStrings = [];
        if ((settings.user != null) && (settings.pass != null)) {
          authString = "" + settings.user + ":" + settings.pass + "@";
        } else {
          authString = "";
        }
        if (!_.isArray(settings.host)) {
          throw new Error("Host must be an array of strings");
        }
        optionsStr = "";
        if (settings.options != null) {
          _ref = settings.options;
          for (opt in _ref) {
            val = _ref[opt];
            optionsStr += "" + opt + "=" + val + "&";
          }
          optionsStr = optionsStr.replace(/&$/, "");
        }
        _ref1 = settings.host;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          host = _ref1[_i];
          s = "" + authString + host + ":" + settings.port + "/" + settings.name;
          if (optionsStr.length > 0) {
            s += "?" + optionsStr;
          }
          connStrings.push(s);
        }
        return connStrings.join(",");
      };

      return Connections;

    })();
    return Connections;
  };

}).call(this);
