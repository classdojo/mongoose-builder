// Generated by CoffeeScript 1.6.2
(function() {
  exports.plugin = function() {
    /*
      Responsible for defining all the relational operations between
      schemas as defined by a valid relation.json config file
    */

    var MongooseChild, MongooseRelational;

    MongooseChild = require("" + __dirname + "/child");
    return MongooseRelational = (function() {
      /*
        Method: constructor
        
        Delegates build operations to build
        specific _relation object.
      
        Schemas collection used to inject specific
        instance methods into each model.
      
        Also pass in a reference to the models object which
        at this point is uninitialized. will soon be populated
        with model objects that communicate directly to the mongo
        database.
      
        child_plugin requires a reference to models in order to carry
        out Relational Proxy operations.
      */
      function MongooseRelational(schemas, models) {
        this._schemas = schemas;
        this._models = models;
      }

      /*
        Method: addRelationship  (Synchronous)
      
        Creates a relationship between node1 and node2 of type, type. Valid
        types are
          "parent_child"
          "orphan"
      
        Orphan types will add the model to the orphaned collections.
      */


      MongooseRelational.prototype.addRelationship = function(type, sNames) {
        var child, childName, options, orphan, parent, parentName;

        if (type === "parent_child") {
          parentName = sNames.parent.name;
          childName = sNames.child.name;
          parent = this._schemas[parentName];
          child = this._schemas[childName];
          options = {
            mongoose: {
              models: this._models
            },
            child: {
              name: childName,
              schema: child,
              collectionName: utils.pluralize(childName)
            },
            parent: {
              name: parentName,
              collectionName: utils.pluralize(parentName)
            },
            permission: {
              schema: this._schemas['Permission']
            }
          };
          return parent.plugin(MongooseChild.plugin, options);
        } else if (type === "orphan") {
          return orphan = sNames.orphan;
        } else {
          return console.error("Invalid type " + type);
        }
      };

      MongooseRelational;

      return MongooseRelational;

    })();
  };

}).call(this);
